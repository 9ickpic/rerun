#!/usr/bin/env node
const inquirer = require('inquirer');
const { searchPackages } = require('./lib/searchPackages');
const { installPackages, setupPackage } = require('./lib/install');
const fs = require('fs-extra');
const path = require('path');
const execa = require('execa');
const chalk = require('chalk');

const commands = {
	async add() {
		console.log(chalk.blue.bold('üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...'));
		const { packageName } = await inquirer.prompt([
			{
				type: 'autocomplete',
				name: 'packageName',
				message: '–ö–∞–∫–æ–π –ø–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?',
				source: async (_, input) => searchPackages(input),
			},
		]);

		try {
			const packageWithVersion = packageName === 'eslint-plugin-tailwindcss' ? 'eslint-plugin-tailwindcss@3.17.0' : packageName;
			await installPackages([packageWithVersion]);
			console.log(chalk.green(`‚úÖ –ü–∞–∫–µ—Ç ${packageName} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`));
			await setupPackage(packageName);
			console.log(chalk.green(`‚öôÔ∏è –ü–∞–∫–µ—Ç ${packageName} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`));
		} catch (error) {
			console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞ ${packageName}: ${error.message}`));
			process.exit(1);
		}
	},

	async init() {
		console.log(chalk.blue.bold('üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...'));

		const packageGroups = [
			{
				name: '–ò–∫–æ–Ω–∫–∏',
				packages: [{ name: 'lucide-react', checked: false }],
			},
			{
				name: '–£—Ç–∏–ª–∏—Ç—ã',
				packages: [
					{ name: 'clsx', checked: true },
					{ name: 'lodash', checked: false },
					{ name: 'uuid', checked: false },
				],
			},
			{
				name: '–ê–Ω–∏–º–∞—Ü–∏–∏',
				packages: [{ name: 'framer-motion', checked: false }],
			},
			{
				name: '–õ–∏–Ω—Ç–µ—Ä—ã –∏ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä—ã',
				packages: [
					{ name: 'eslint-plugin-tailwindcss', checked: true },
					{ name: 'prettier', checked: true },
					{ name: 'eslint-config-prettier', checked: true },
					{ name: 'eslint-plugin-react', checked: true },
					{ name: 'eslint-plugin-react-hooks', checked: true },
				],
			},
			{
				name: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ',
				packages: [
					{ name: 'why-did-you-render', checked: true },
					{ name: 'tailwindcss', checked: true },
					{ name: 'postcss', checked: true },
					{ name: 'autoprefixer', checked: true },
					{ name: 'sass', checked: true },
					{ name: '@headlessui/react', checked: false },
					{ name: 'zod', checked: false },
					{ name: 'react-loading-skeleton', checked: false },
					{ name: 'react-hot-toast', checked: false },
					{ name: 'react-hook-form', checked: false },
					{ name: 'axios', checked: false },
					{ name: 'zustand', checked: false },
					{ name: 'openai', checked: false },
					{ name: 'fuse.js', checked: false },
					{ name: 'msw', checked: false },
				],
			},
		];

		console.log(chalk.cyan('üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏:'));
		const selectedPackages = [];

		for (const group of packageGroups) {
			const { packages } = await inquirer.prompt([
				{
					type: 'checkbox',
					name: 'packages',
					message: chalk.yellow(`üì¶ ${group.name}`),
					choices: group.packages,
				},
			]);
			selectedPackages.push(...packages);
		}

		if (!selectedPackages.length) {
			console.log(chalk.yellow('‚ö†Ô∏è –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.'));
			return;
		}

		console.log(chalk.cyan('\nüìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:'));
		selectedPackages.forEach(pkg => console.log(chalk.green(`  ‚úì ${pkg}`)));

		try {
			const packagesWithVersions = selectedPackages.map(pkg => {
				if (pkg === 'tailwindcss') return 'tailwindcss@3.4.0';
				if (pkg === 'eslint-plugin-tailwindcss') return 'eslint-plugin-tailwindcss@3.17.0';
				return pkg;
			});
			await installPackages(packagesWithVersions);
			console.log(chalk.green('‚úÖ –í—Å–µ –ø–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã'));
			for (const pkg of selectedPackages) {
				await setupPackage(pkg);
				console.log(chalk.green(`‚öôÔ∏è –ü–∞–∫–µ—Ç ${pkg} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`));
			}
			console.log(chalk.blue.bold('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'));
			console.log(chalk.cyan('‚ÑπÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ package.json –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤–µ—Ä—Å–∏–π –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ "resolutions" –∏–ª–∏ "overrides".'));
		} catch (error) {
			console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`));
			process.exit(1);
		}
	},

	async list() {
		console.log(chalk.blue.bold('üì¶ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤...'));
		try {
			const packageJson = await fs.readJson('package.json');
			console.log(chalk.cyan('üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:'));
			Object.keys(packageJson.dependencies || {}).forEach(pkg => {
				console.log(chalk.green(`  ‚úì ${pkg}`));
			});
		} catch (error) {
			console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ package.json: ${error.message}`));
			process.exit(1);
		}
	},

	async clean() {
		console.log(chalk.blue.bold('üßπ –û—á–∏—Å—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞ Create React App...'));
		const filesToRemove = ['src/App.js', 'src/index.js', 'src/App.css', 'src/index.css', 'src/logo.svg', 'public/favicon.ico', 'public/logo192.png', 'public/logo512.png'];

		try {
			for (const file of filesToRemove) {
				await fs.remove(file).catch(() => {});
				console.log(chalk.green(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: ${file}`));
			}

			// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ App.jsx
			const appJsContent = `import React from 'react';
import './App.scss';

function App() {
  return (
    <div className="App">
      <h1>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</h1>
    </div>
  );
}

export default App;`;

			// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ index.jsx
			const indexJsContent = `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.scss';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`;

			await fs.writeFile('src/App.jsx', appJsContent);
			console.log(chalk.green('üìù –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª App.jsx'));
			await fs.writeFile('src/index.jsx', indexJsContent);
			console.log(chalk.green('üìù –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª index.jsx'));
			await fs.writeFile('src/App.scss', `/* –°—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ App */\n`);
			console.log(chalk.green('üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª App.scss'));

			console.log(chalk.blue.bold('üéâ –®–∞–±–ª–æ–Ω Create React App —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω'));
		} catch (error) {
			console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —à–∞–±–ª–æ–Ω–∞: ${error.message}`));
			process.exit(1);
		}
	},

	async generate() {
		console.log(chalk.blue.bold('üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...'));
		try {
			const { componentName, useFramerMotion } = await inquirer.prompt([
				{
					type: 'input',
					name: 'componentName',
					message: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (PascalCase):',
					validate: input => /^[A-Z][a-zA-Z]*$/.test(input) || '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ PascalCase',
				},
				{
					type: 'confirm',
					name: 'useFramerMotion',
					message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Framer Motion –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π?',
					default: false,
				},
			]);

			console.log(chalk.cyan(`üìç –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${process.cwd()}`));

			await fs.ensureDir('src');
			console.log(chalk.green('üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è src —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'));

			const componentDir = path.join('src', 'components', componentName);
			await fs.ensureDir(componentDir);
			console.log(chalk.green(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${componentDir} —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`));

			// –ú–∞–ø–ø–∏–Ω–≥ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–≥–æ–≤
			const semanticTags = {
				Header: 'header',
				Section: 'section',
				Article: 'article',
				Nav: 'nav',
				Main: 'main',
				Footer: 'footer',
				Aside: 'aside',
			};

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
			const normalizedName = componentName.charAt(0).toUpperCase() + componentName.slice(1).toLowerCase();
			const semanticTag = semanticTags[normalizedName] || 'div';
			const tag = useFramerMotion ? 'motion.div' : semanticTag;

			// –°–æ–∑–¥–∞–Ω–∏–µ *ComponentName*.jsx
			const jsxContent = `${useFramerMotion ? 'import { motion } from "framer-motion";\n' : ''}import React from 'react';
	import styles from './${componentName}.module.scss';
	
	function ${componentName}() {
		return (
			${useFramerMotion ? `<motion.div className={styles.container}></motion.div>` : `<${semanticTag} className={styles.container}></${semanticTag}>`}
		);
	}
	
	export default ${componentName};
	`;

			// –°–æ–∑–¥–∞–Ω–∏–µ *ComponentName*.module.scss
			const scssContent = `/* –ú–æ–¥—É–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${componentName} */\n.container {}`;

			// –°–æ–∑–¥–∞–Ω–∏–µ *ComponentName*.test.js
			const testContent = `import React from 'react';
	import { render } from '@testing-library/react';
	import ${componentName} from './${componentName}';
	
	describe('${componentName}', () => {
		it('renders without crashing', () => {
			render(<${componentName} />);
		});
	});
	`;

			const jsxPath = path.join(componentDir, `${componentName}.jsx`);
			const scssPath = path.join(componentDir, `${componentName}.module.scss`);
			const testPath = path.join(componentDir, `${componentName}.test.js`);

			await fs.writeFile(jsxPath, jsxContent);
			if (await fs.pathExists(jsxPath)) {
				console.log(chalk.green(`üìù –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ${componentName}.jsx —Å–æ–∑–¥–∞–Ω –ø–æ –ø—É—Ç–∏ ${jsxPath}`));
			} else {
				throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${jsxPath}`);
			}

			await fs.writeFile(scssPath, scssContent);
			if (await fs.pathExists(scssPath)) {
				console.log(chalk.green(`üìù –§–∞–π–ª ${componentName}.module.scss —Å–æ–∑–¥–∞–Ω –ø–æ –ø—É—Ç–∏ ${scssPath}`));
			} else {
				throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${scssPath}`);
			}

			await fs.writeFile(testPath, testContent);
			if (await fs.pathExists(testPath)) {
				console.log(chalk.green(`üìù –§–∞–π–ª ${componentName}.test.js —Å–æ–∑–¥–∞–Ω –ø–æ –ø—É—Ç–∏ ${testPath}`));
			} else {
				throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ${testPath}`);
			}

			console.log(chalk.blue.bold('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'));
		} catch (error) {
			console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${error.message}`));
			process.exit(1);
		}
	},

	async create() {
		console.log(chalk.blue.bold('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ React-–ø—Ä–æ–µ–∫—Ç–∞...'));
		try {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
			const files = await fs.readdir(process.cwd());
			if (files.length > 0 && !files.every(file => ['.git', '.gitignore'].includes(file))) {
				console.error(chalk.red('‚ùå –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã.'));
				process.exit(1);
			}

			// –ó–∞–ø—É—Å–∫ create-react-app
			console.log(chalk.cyan('‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è npx create-react-app...'));
			await execa('npx', ['create-react-app', '.'], { stdio: 'inherit' });

			// –û—á–∏—Å—Ç–∫–∞ —à–∞–±–ª–æ–Ω–∞
			await commands.clean();

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞
			await commands.init();

			console.log(chalk.blue.bold('üéâ –ù–æ–≤—ã–π React-–ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'));
		} catch (error) {
			console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`));
			process.exit(1);
		}
	},
};

async function main() {
	console.clear();
	console.log(chalk.blue.bold('‚ö°Ô∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ reRun CLI!'));
	const [, , command = 'init'] = process.argv;

	if (!commands[command]) {
		console.log(chalk.red(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`));
		console.log(chalk.cyan('‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: add, init, list, clean, generate, create'));
		process.exit(1);
	}

	await commands[command]();
}

main().catch(err => {
	console.error(chalk.red(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`));
	process.exit(1);
});
